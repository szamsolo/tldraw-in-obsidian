@import url("tldraw/tldraw.css");

/* 
	!!! Please prefix all custom classes with 'ptl' !!!

	Any classes prefixed with 'ptl' is a custom class (stands for plugin-tldraw).
	Any classes prefixed with 'tl' or 'tlui' is a class from the official Tldraw app.
	Any other classes is most likely from Obsidian.

	Obsidian's button:not(.clickable-icon) is a troublesome selector/style. Since we do
	not have control of Tldraw's underlying components and styles, we cannot just add
	".clickable-icon" to all of Tldraw's buttons. We could add the classes manually using 
	native javascript APIs but we would be affecting the DOM directly which could cause problems
	with Tldraw's react tree. The only solution I see is when there's a problematic override of
	Tldraw's styles by Obsidian's button:not(.clickable-icon) is find the styles that are
	affected (usually only background-color, box-shadow, and padding) and find what those styles 
	should be (classes prefixed with 'tl' or 'tlui' then find a way to increase the specificity over button:not(.clickable-icon) using selectors and paste in those styles. Look for the comments that start with 'OVERRIDING'.
*/

.tldraw-view-root {
	touch-action: none;
	position: relative;
	width: 100%;
	height: 100%;

	/* fixes some positioning problems that tldraw has due to bringing embedded into another app */
	transform: translate3d(0, 0, 0);
}

/* OVERRIDING button:not(.clickable-icon) back to tldraw's original styles: */
.tldraw-view-root .tlui-button {
	background-color: transparent;
	color: currentColor;
	padding: 0px 13px;
	box-shadow: none;
}

/* Overriding back to original style */
.tldraw-view-root .tlui-button:disabled {
	color: var(--color-text-3);
}

/* Overriding back to original style */
.tldraw-view-root .tlui-button__tool[aria-checked='true'] {
	color: var(--color-selected-contrast);
}

.tldraw-view-root .ptl-quick-action-button-wrapper[data-selected=true] .tlui-button__icon {
	color: var(--color-selected-contrast);
}

.tldraw-view-root .ptl-quick-action-button-wrapper[data-selected=true] .tlui-button::before {
	content: "";
	position: absolute;
	inset: 4px;
	border-radius: var(--radius-2);
	background-color: var(--color-selected);
}

/* OVERRIDING button:not(.clickable-icon) */
.tldraw-view-root .tlui-button.tlui-help-menu__button {
	background-color: var(--color-low);
}

.tldraw-view-root kbd {
	background: inherit;
	border-radius: inherit;
	padding: inherit;
}

div[data-type="tldraw-view"] .view-content.tldraw-view-content,
div[data-type="tldraw-read-only"] .view-content.tldraw-view-content {
	/* gets rid of the padding so the canvas can bleed against the edges */
	padding: 0;
	/* creates a space at the bottom so that the status bar isn't covering the canvas */
	padding-bottom: var(--size-4-8);
}

.is-mobile div[data-type="tldraw-view"] .view-content.tldraw-view-content {
	/* if there is just .is-mobile (without .is-phone) the mobile-navbar isn't present so we can take up more space  */
	padding-bottom: 0;
}

.is-phone div[data-type="tldraw-view"] .view-content.tldraw-view-content {
	/* creates a space at the bottom so that the .is-phone mobile-navbar isn't covering the canvas  */
	padding-bottom: var(--size-4-12);
}

.ptl-statusbar-viewmode-box {
	display: flex;
	align-items: center;
	gap: 4px;
}

.plugin-tldraw .ptl-statusbar-viewmode-box .ptl-viewmode-btn {
	background-color: transparent;
	padding: 0 4px;
	height: 12px;
	width: 22px;
	box-shadow: none;
	border-radius: 2px;

	display: grid;
	place-items: center;

	font-size: 8px;
	font-weight: 700;
	line-height: 8px;

	cursor: pointer;

	&:hover {
		background-color: var(--background-secondary-alt);
	}
}

.plugin-tldraw .ptl-statusbar-viewmode-box .ptl-viewmode-btn.ptl-viewmode-active {
	box-shadow: inset 0px 0px 0px 1px currentColor;
	border-radius: 4px;
}

.ptl-hide-statusbar-viewmode {
	display: none;
}

.ptl-statusbar-viewmode-btn-box {
	display: flex;
	align-items: center;
	gap: 2px;
}

.ptl-default-code {
	margin-top: 6px;
	display: block;
}

.tl-background {
	touch-action: none;
}

.status-bar-item.plugin-tldraw {
	background-color: var(--background-modifier-border);
}

.ptl-markdown-embed {
	position: relative;
}

.ptl-embed-context-bar {
	padding: 2px;
	display: flex;
	background: var(--background-primary-alt);
}

.ptl-embed-title-bar {
	font-size: var(--font-smallest);
	margin-left: 8px;
	align-self: center;
}

/* Render the context bar for embeds in the top right corner. */
.ptl-markdown-embed .ptl-embed-context-bar {
	display: flex;
	justify-content: space-between;
	width: 100%;
	position: absolute;
	top: 0;
}

.ptl-embed-action-bar {
	display: flex;
}

.ptl-markdown-embed .ptl-view-content .tldraw-view-root {
	height: 300px;
}

.ptl-markdown-embed .ptl-view-content[data-showBgDots="true"] {
	background-image:
		radial-gradient(rgb(78, 78, 78) 1px, transparent 1px),
		radial-gradient(rgb(78, 78, 78) 1px, transparent 1px);
	background-size: 48px 48px;
	/* Size of the grid cells */
	background-position: 0 0, 24px 24px;
	/* Offset for the dotted pattern */
}

.ptl-markdown-embed .ptl-view-content[data-has-shape="false"] .ptl-tldraw-image::before {
	display: block;
	content: "This is an empty tldraw file. Double click to edit in a new tab, or right click for options.";
	height: 100%;
	text-align: center;
	align-content: center;
}

.ptl-markdown-embed .ptl-tldraw-image-container {
	display: flex;
	justify-content: center;
}

.canvas-node .ptl-markdown-embed .ptl-tldraw-image {
	height: var(--canvas-node-height);
	width: var(--canvas-node-width);
}

.ptl-markdown-embed .ptl-tldraw-image {
	max-inline-size: max-content;
}

.ptl-markdown-embed .ptl-view-content {
	height: max-content;
}

.ptl-view-content:empty {
	min-width: var(--ptl-placeholder-width);
	min-height: var(--ptl-placeholder-height);
}

.ptl-tldraw-image:not(:has(div > img)) {
	min-width: var(--ptl-placeholder-width);
	min-height: var(--ptl-placeholder-height);
}

.ptl-markdown-embed .ptl-tldraw-image img {
	object-fit: contain;
}

.ptl-download-error {
	color: red;
}

.ptl-download-success {
	color: green;
}

.ptl-compare-modal {
	width: 100%;
	height: 100%;
}

.ptl-compare-modal-content {
	display: flex;
	flex-direction: column;
}

.ptl-conflict-body {
	flex: 1;
}

.ptl-compare-tldraw-container {
	display: flex;
	height: 100%;
	width: 100%;
	flex-direction: row;
	flex-wrap: wrap;
	gap: 2em;
}

.ptl-compare-tldraw-container .ptl-compare-tldraw {
	flex: 1;
	display: flex;
	flex-direction: column;
	min-width: 250px;
}

.ptl-compare-preview {
	height: 400px;
}

.ptl-modal-title-with-icon {
	padding-top: 12px;
	display: flex;
	flex-direction: row;
	gap: 0.25em;
	align-items: center;
}

.ptl-modal-title-with-icon span.ptl-modal-icon {
	display: contents;
}

.ptl-suggestion-item {
	display: flex;
	gap: 0.25em;
}

.ptl-suggestion-item-icon {
	display: contents;
}

.ptl-suggestion-label {
	font-size: x-small;
}

.ptl-embed-bounds-selection {
	position: absolute;
	top: 0;
	left: 0;
	z-index: 999;
}

.ptl-embed-bounds-selection[data-target-bounds="true"] {
	border: 1px solid var(--color-text-0);
}

.ptl-embed-bounds-selection[data-target-bounds="false"] {
	border: 1px dashed var(--color-text-0);
}

.ptl-embed-bounds-selection[data-shade-bg="true"]::before {
	position: absolute;
	content: "";
	display: block;
	width: 100%;
	height: 100%;
	background-color: var(--color-text-0);
	opacity: 0.15;
}

@media print {
	.ptl-markdown-embed {
		/* Prevent the embeds from being split across multiple pages */
		break-inside: avoid;
	}

	.ptl-markdown-embed .ptl-tldraw-image img {
		/* Prevent an embed from being larger than the print page size */
		max-height: 85vh;
	}

	.ptl-embed-resize-handle {
		display: none;
	}
}

.ptl-embed-resize-handle {
	position: absolute;
	bottom: 0;
	right: 0;
	width: 0;
	height: 0;
	border-style: solid;
	border-width: 0 0 16px 16px;
	border-color: transparent transparent var(--background-modifier-border) transparent;
	cursor: row-resize;
}

.ptl-settings-tab-header {
	display: flex;
	overflow-y: hidden;
}

.ptl-settings-tab-container {
	display: flex;
	gap: var(--size-4-2);
}

.ptl-settings-tab-container .ptl-settings-tab-item {
	font-weight: var(--font-semibold);
	padding-block: var(--size-2-3);
	padding-inline: var(--size-4-3);
	border-radius: var(--radius-m);
	width: max-content;
}

.ptl-settings-tab-container .ptl-settings-tab-item:hover {
	cursor: pointer;
}

.ptl-settings-tab-item[data-is-active=false]:hover {
    background-color: var(--interactive-hover);
}

.ptl-settings-tab-item[data-is-active=true] {
	background-color: var(--interactive-accent);
	color: var(--text-on-accent);
}

.ptl-settings-frontmatter-taglist {
	display: flex;
	flex-wrap: wrap;
	gap: var(--size-4-2);
}